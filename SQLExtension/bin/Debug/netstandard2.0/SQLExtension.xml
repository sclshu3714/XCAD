<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SQLExtension.Core</name>
    </assembly>
    <members>
        <member name="T:SQLExtension.TableAttribute">
            <summary>
            指定表名
            </summary>
        </member>
        <member name="M:SQLExtension.TableAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库表名</param>
        </member>
        <member name="P:SQLExtension.TableAttribute.Name">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="P:SQLExtension.TableAttribute.Schema">
            <summary>
            数据库模式
            </summary>
        </member>
        <member name="T:SQLExtension.ColumnAttribute">
            <summary>
            指定列名
            </summary>
        </member>
        <member name="M:SQLExtension.ColumnAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">列名</param>    
        </member>
        <member name="P:SQLExtension.ColumnAttribute.Name">
            <summary>
            数据库表列名
            </summary>
        </member>
        <member name="P:SQLExtension.ColumnAttribute.Insert">
            <summary>
            新增是否有效
            </summary>
        </member>
        <member name="P:SQLExtension.ColumnAttribute.Update">
            <summary>
            更新是否有效
            </summary>
        </member>
        <member name="T:SQLExtension.KeyAttribute">
            <summary>
            指定表主键
            </summary>
        </member>
        <member name="M:SQLExtension.KeyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:SQLExtension.KeyAttribute.Name">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:SQLExtension.BaseSqlBuilder`1">
            <summary>
            抽象基类
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Update(`0,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Insert(`0,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Select(`0,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Join(`0,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Where(`0,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.In(`0,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.GroupBy(`0,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.OrderBy(`0,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Max(`0,SQLExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Min(`0,SQLExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Avg(`0,SQLExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Count(`0,SQLExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Sum(`0,SQLExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Update(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Insert(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Select(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Join(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Where(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.In(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.GroupBy(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.OrderBy(System.Linq.Expressions.Expression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Max(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Min(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Avg(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Count(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BaseSqlBuilder`1.Sum(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.ConfigurationManager">
            <summary>
            配置工具类
            </summary>
        </member>
        <member name="P:SQLExtension.ConfigurationManager.Configuration">
            <summary>
            app配置
            </summary>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.SetConfigurationFile(System.String,System.String)">
            <summary>
            设置app配置
            </summary>
            <param name="fileName">文件名</param>
            <param name="basePath">文件路径，默认：Directory.GetCurrentDirectory()</param>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.Get``1(System.String)">
            <summary>
            根据key值获取Section然后转换为T类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.Get``1(System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            根据key值获取Section然后转换为T类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="configureOptions"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.Bind(System.String,System.Object)">
            <summary>
            绑定配置到已有实例
            </summary>
            <param name="key"></param>
            <param name="instance"></param>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.Bind(System.String,System.Object,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            绑定配置到已有实例
            </summary>
            <param name="key"></param>
            <param name="instance"></param>
            <param name="configureOptions"></param>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetValue``1(System.String)">
            <summary>
            获取配置信息
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="key">配置名称</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetValue``1(System.String,``0)">
            <summary>
            获取配置信息
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="key">配置名称</param>
            <param name="defaultValue">默认值</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetValue(System.Type,System.String)">
            <summary>
            获取配置信息
            </summary>
            <param name="type">配置对象类型</param>
            <param name="key">配置名称</param>
            <returns>返回object类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetValue(System.Type,System.String,System.Object)">
            <summary>
            获取配置信息
            </summary>
            <param name="type">配置对象类型</param>
            <param name="key">配置名称</param>
            <param name="defaultValue"></param>
            <returns>返回object类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetConnectionString(System.String)">
            <summary>
            获取ConnectionStrings节点下的链接字符串
            </summary>
            <param name="name">连接字符串名称</param>
            <returns>返回连接字符串</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptions``1">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptions``1(System.String)">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="key">配置名称</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptionsMonitor``1">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptionsMonitor``1(System.String)">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="key">配置名称</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptionsMonitor``1(System.Action{``0})">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="listener">监听配置变化时的委托</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptionsMonitor``1(System.Action{``0,System.String})">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="listener">监听配置变化时的委托</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptionsMonitor``1(System.String,System.Action{``0})">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="key">配置名称</param>
            <param name="listener">监听配置变化时的委托</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="M:SQLExtension.ConfigurationManager.GetOptionsMonitor``1(System.String,System.Action{``0,System.String})">
            <summary>
            获取配置并映射到实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="key">配置名称</param>
            <param name="listener">监听配置变化时的委托</param>
            <returns>返回T类型配置对象</returns>
        </member>
        <member name="T:SQLExtension.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:SQLExtension.DatabaseType.SQLServer">
            <summary>
            SqlServer数据库类型
            </summary>
        </member>
        <member name="F:SQLExtension.DatabaseType.MySQL">
            <summary>
            MySQL数据库类型
            </summary>
        </member>
        <member name="F:SQLExtension.DatabaseType.Oracle">
            <summary>
            Oracle数据库类型
            </summary>
        </member>
        <member name="F:SQLExtension.DatabaseType.SQLite">
            <summary>
            SQLite数据库类型
            </summary>
        </member>
        <member name="F:SQLExtension.DatabaseType.PostgreSQL">
            <summary>
            PostgreSQL数据库类型
            </summary>
        </member>
        <member name="T:SQLExtension.OrderType">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:SQLExtension.OrderType.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:SQLExtension.OrderType.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:SQLExtension.DependencyInjectionType">
            <summary>
            依赖注入模式
            </summary>
        </member>
        <member name="F:SQLExtension.DependencyInjectionType.Singleton">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="F:SQLExtension.DependencyInjectionType.Transient">
            <summary>
            瞬时模式
            </summary>
        </member>
        <member name="F:SQLExtension.DependencyInjectionType.Scoped">
            <summary>
            作用域模式
            </summary>
        </member>
        <member name="T:SQLExtension.BinaryExpressionResolve">
            <summary>
            表示具有二进制运算符的表达式
            </summary>
        </member>
        <member name="M:SQLExtension.BinaryExpressionResolve.OperatorParser(System.Linq.Expressions.ExpressionType,System.Int32,SQLExtension.SqlPack,System.Boolean)">
            <summary>
            OperatorParser
            </summary>
            <param name="expressionNodeType">表达式树节点类型</param>
            <param name="operatorIndex">操作符索引</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="useIs">是否使用is</param>
        </member>
        <member name="M:SQLExtension.BinaryExpressionResolve.Join(System.Linq.Expressions.BinaryExpression,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.BinaryExpressionResolve.Where(System.Linq.Expressions.BinaryExpression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.ConstantExpressionResolve">
            <summary>
            表示具有常数值的表达式
            </summary>
        </member>
        <member name="M:SQLExtension.ConstantExpressionResolve.Select(System.Linq.Expressions.ConstantExpression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ConstantExpressionResolve.Where(System.Linq.Expressions.ConstantExpression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ConstantExpressionResolve.Join(System.Linq.Expressions.ConstantExpression,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ConstantExpressionResolve.In(System.Linq.Expressions.ConstantExpression,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ConstantExpressionResolve.GroupBy(System.Linq.Expressions.ConstantExpression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ConstantExpressionResolve.OrderBy(System.Linq.Expressions.ConstantExpression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.InvocationExpressionResolve">
            <summary>
            表示将委托或lambda表达式应用于参数表达式列表的表达式
            </summary>
        </member>
        <member name="M:SQLExtension.InvocationExpressionResolve.Where(System.Linq.Expressions.InvocationExpression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.LambdaExpressionResolve">
            <summary>
            描述一个lambda表达式
            </summary>
        </member>
        <member name="M:SQLExtension.LambdaExpressionResolve.Where(System.Linq.Expressions.LambdaExpression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.ListInitExpressionResolve">
            <summary>
            表示包含集合初始值设定项的构造函数调用
            </summary>
        </member>
        <member name="M:SQLExtension.ListInitExpressionResolve.Insert(System.Linq.Expressions.ListInitExpression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ListInitExpressionResolve.GroupBy(System.Linq.Expressions.ListInitExpression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ListInitExpressionResolve.OrderBy(System.Linq.Expressions.ListInitExpression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.MemberExpressionResolve">
            <summary>
            表示访问字段或属性
            </summary>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Insert(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Update(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Select(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Join(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Where(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.In(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.GroupBy(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.OrderBy(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Max(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Min(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Avg(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Count(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberExpressionResolve.Sum(System.Linq.Expressions.MemberExpression,SQLExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.MemberInitExpressionResolve">
            <summary>
            表示调用构造函数并初始化新对象的一个或多个成员
            </summary>
        </member>
        <member name="M:SQLExtension.MemberInitExpressionResolve.Insert(System.Linq.Expressions.MemberInitExpression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MemberInitExpressionResolve.Update(System.Linq.Expressions.MemberInitExpression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.MethodCallExpressionResolve">
            <summary>
            表示对静态方法或实例方法的调用
            </summary>
        </member>
        <member name="F:SQLExtension.MethodCallExpressionResolve.methods">
            <summary>
            methods
            </summary>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.IN(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            IN
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.NotIn(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            Not In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.Like(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            Like
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.LikeLeft(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            LikeLeft
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.LikeRight(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            LikeRight
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.NotLike(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            NotLike
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.Contains(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            Contains
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.IsNullOrEmpty(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            IsNullOrEmpty
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.Equals(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            Equals
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.ToUpper(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            ToUpper
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.ToLower(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            ToLower
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.Trim(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            Trim
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.TrimStart(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            TrimStart
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.TrimEnd(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            TrimEnd
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.In(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.Where(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.Insert(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression"></param>
            <param name="sqlPack"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.GroupBy(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.MethodCallExpressionResolve.OrderBy(System.Linq.Expressions.MethodCallExpression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.NewArrayExpressionResolve">
            <summary>
            表示创建一个新数组，并可能初始化该新数组的元素
            </summary>
        </member>
        <member name="M:SQLExtension.NewArrayExpressionResolve.In(System.Linq.Expressions.NewArrayExpression,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.NewArrayExpressionResolve.Insert(System.Linq.Expressions.NewArrayExpression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.NewArrayExpressionResolve.GroupBy(System.Linq.Expressions.NewArrayExpression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.NewArrayExpressionResolve.OrderBy(System.Linq.Expressions.NewArrayExpression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.NewExpressionResolve">
            <summary>
            表示一个构造函数调用
            </summary>
        </member>
        <member name="M:SQLExtension.NewExpressionResolve.Update(System.Linq.Expressions.NewExpression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.NewExpressionResolve.Insert(System.Linq.Expressions.NewExpression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.NewExpressionResolve.Select(System.Linq.Expressions.NewExpression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.NewExpressionResolve.GroupBy(System.Linq.Expressions.NewExpression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.NewExpressionResolve.OrderBy(System.Linq.Expressions.NewExpression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.ParameterExpressionResolve">
            <summary>
            表示命名参数表达式
            </summary>
        </member>
        <member name="M:SQLExtension.ParameterExpressionResolve.Select(System.Linq.Expressions.ParameterExpression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.UnaryExpressionResolve">
            <summary>
            表示具有一元运算符的表达式
            </summary>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Select(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Insert(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Update(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Where(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.GroupBy(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.OrderBy(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Max(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Min(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Avg(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Count(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Sum(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.UnaryExpressionResolve.Join(System.Linq.Expressions.UnaryExpression,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.Extensions">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:SQLExtension.Extensions.Like(System.Object,System.String)">
            <summary>
            LIKE
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.LikeLeft(System.Object,System.String)">
            <summary>
            LIKE '% _ _ _'
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.LikeRight(System.Object,System.String)">
            <summary>
            LIKE '_ _ _ %'
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.NotLike(System.Object,System.String)">
            <summary>
            NOT LIKE
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.In``1(System.Object,``0[])">
            <summary>
            IN
            </summary>
            <typeparam name="T">IN数组里面的数据类型</typeparam>
            <param name="this">扩展对象自身</param>
            <param name="array">IN数组</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.NotIn``1(System.Object,``0[])">
            <summary>
            NOT IN
            </summary>
            <typeparam name="T">NOT IN数组里面的数据类型</typeparam>
            <param name="this">扩展对象自身</param>
            <param name="array">NOT IN数组</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``1">
            <summary>
            True
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``2">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``3">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``4">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``5">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``6">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``7">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``8">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``9">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.True``10">
            <summary>
            True
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``1">
            <summary>
            False
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``2">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``3">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``4">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``5">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``6">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``7">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``8">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``9">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.False``10">
            <summary>
            False
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Or``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.And``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.WhereIf``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="other"></param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            ToLambda
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToObject(System.Linq.Expressions.Expression)">
            <summary>
            转换Expression为object
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            linq正序排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            linq倒叙排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            linq正序多列排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            linq倒序多列排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.BuildIOrderedQueryable``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            根据属性和排序方法构建IOrderedQueryable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Substring(System.String,System.String,System.Boolean)">
            <summary>
            从分隔符开始向尾部截取字符串
            </summary>
            <param name="this">源字符串</param>
            <param name="separator">分隔符</param>
            <param name="lastIndexOf">true：从最后一个匹配的分隔符开始截取，false：从第一个匹配的分隔符开始截取，默认：true</param>
            <returns>string</returns>
        </member>
        <member name="M:SQLExtension.Extensions.GetCoreType(System.Type)">
            <summary>
            如果type是Nullable类型则返回UnderlyingType，否则则直接返回type本身
            </summary>
            <param name="this">类型</param>
            <returns>Type</returns>
        </member>
        <member name="M:SQLExtension.Extensions.IsNullable(System.Type)">
            <summary>
            判断类型是否是Nullable类型
            </summary>
            <param name="this">类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.IsNull(System.Object)">
            <summary>
            是否为空
            </summary>
            <param name="this">object对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="this">待验证的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="this">待验证的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToSafeValue(System.Object,System.Type)">
            <summary>
            转换为安全类型的值
            </summary>
            <param name="this">object对象</param>
            <param name="type">type</param>
            <returns>object</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDynamicParameters(System.Data.Common.DbParameter[])">
            <summary>
            DbParameter转换为DynamicParameters
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDynamicParameters(System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            DbParameter转换为DynamicParameters
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDynamicParameters(System.Data.Common.DbParameter)">
            <summary>
             DbParameter转换为DynamicParameters
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDynamicParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             IDictionary转换为DynamicParameters
            </summary>
            <param name="this"></param>        
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbCommand)">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts this object to a database parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="command">The command.</param>        
            <returns>The given data converted to a DbParameter[].</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbConnection)">
            <summary>
             An IDictionary&lt;string,object&gt; extension method that converts this object to a database parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="connection">The connection.</param>        
            <returns>The given data converted to a DbParameter[].</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToSqlParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a SQL parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a SqlParameter[].</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToMySqlParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a MySQL parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a MySqlParameter[].</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToSqliteParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a Sqlite parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a SqliteParameter[].</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToOracleParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a Oracle parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a OracleParameter[].</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToNpgsqlParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a PostgreSQL parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a NpgsqlParameter[].</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDataTable(System.Data.IDataReader)">
            <summary>
            IDataReader转换为DataTable
            </summary>
            <param name="this">reader数据源</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            List集合转DataTable
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">list数据源</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDataSet(System.Data.IDataReader)">
            <summary>
            IDataReader转换为DataSet
            </summary>
            <param name="this">reader数据源</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDynamic(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为dynamic对象
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>dynamic</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDynamics(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为dynamic对象集合
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>dynamic集合</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDictionary(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为Dictionary对象
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToDictionaries(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为Dictionary对象集合
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>Dictionary集合</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToEntity``1(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为强类型实体
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>强类型实体</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToEntities``1(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为强类型实体集合
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>强类型实体集合</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToList``1(System.Data.IDataReader)">
            <summary>
            IDataReader转换为T集合
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">IDataReader数据源</param>
            <returns>T类型集合</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToLists``1(System.Data.IDataReader)">
            <summary>
            IDataReader转换为T集合的集合
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">IDataReader数据源</param>
            <returns>T类型集合的集合</returns>
        </member>
        <member name="M:SQLExtension.Extensions.ToFirstOrDefault``1(System.Data.IDataReader)">
            <summary>
            IDataReader转换为T类型对象
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">IDataReader数据源</param>
            <returns>T类型对象</returns>
        </member>
        <member name="M:SQLExtension.Extensions.IsSqlInject(System.String,System.String)">
            <summary>
            判断是否sql注入
            </summary>
            <param name="this">sql字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ReplaceSqlWithRegex(System.String,System.String)">
            <summary>
            正则表达式替换sql
            </summary>
            <param name="this">sql字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.Contains(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则判断是否包含目标字符串
            </summary>
            <param name="this">源字符串</param>
            <param name="value">目标字符串，例如：判断是否包含ASC或DESC为@"(/\*(?:|)*?\*/)|(\b(ASC|DESC)\b)"</param>
            <param name="options">匹配模式</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取首个指定特性
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取指定特性集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.GetFirstOrDefaultAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取首个指定特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.ContainsAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            是否包含指定特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Extensions.AddSQLBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Func{System.String,System.Object,System.String},System.Boolean,SQLExtension.DependencyInjectionType)">
            <summary>
            SQLBuilder仓储注入扩展
            </summary>
            <param name="this">依赖注入服务集合</param>
            <param name="configuration">服务配置</param>
            <param name="defaultName">默认数据库名称</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <param name="type">依赖注入模式，默认单例模式</param>
            <returns></returns>
            <example>
                <code>
                //appsetting.json
                {
                    "Logging": {
                        "LogLevel": {
                            "Default": "Information",
                            "Microsoft": "Warning",
                            "Microsoft.Hosting.Lifetime": "Information"
                        }
                    },
                    "AllowedHosts": "*",
                    "ConnectionStrings": {
                        "Base": [ "SQLServer", "数据库连接字符串" ],
                        "Sqlserver": [ "SQLServer", "数据库连接字符串" ],
                        "Oracle": [ "Oracle", "数据库连接字符串" ],
                        "MySql": [ "MySQL", "数据库连接字符串" ],
                        "Sqlite": [ "SQLite", "数据库连接字符串" ],
                        "Pgsql": [ "PostgreSQL", "数据库连接字符串" ]
                    }
                }
                //Controller获取方法
                private readonly IRepository _repository;
                public WeatherForecastController(Func&lt;string, IRepository&gt; handler)
                {
                    _repository = handler("Sqlserver");
                }
                </code>
            </example>
        </member>
        <member name="T:SQLExtension.OracleDynamicParameters">
            <summary>
            Oracle的DynamicParameters实现，用于支持Oracle游标类型
            </summary>
        </member>
        <member name="M:SQLExtension.OracleDynamicParameters.Add(System.String,System.Object,Oracle.ManagedDataAccess.Client.OracleDbType)">
            <summary>
            Add
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="oracleDbType"></param>
        </member>
        <member name="M:SQLExtension.OracleDynamicParameters.Add(System.String,Oracle.ManagedDataAccess.Client.OracleDbType,System.Data.ParameterDirection)">
            <summary>
            Add
            </summary>
            <param name="name"></param>
            <param name="oracleDbType"></param>
            <param name="direction"></param>
        </member>
        <member name="M:SQLExtension.OracleDynamicParameters.Add(System.String,Oracle.ManagedDataAccess.Client.OracleDbType,System.Data.ParameterDirection,System.Object,System.Nullable{System.Int32})">
            <summary>
            Add
            </summary>
            <param name="name"></param>
            <param name="oracleDbType"></param>
            <param name="direction"></param>
            <param name="value"></param>
            <param name="size"></param>
        </member>
        <member name="M:SQLExtension.OracleDynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            AddParameters
            </summary>
            <param name="command"></param>
            <param name="identity"></param>
        </member>
        <member name="T:SQLExtension.ISqlBuilder">
            <summary>
            ISqlBuilder
            </summary>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Update(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Insert(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Select(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Join(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Where(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.In(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.GroupBy(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.OrderBy(System.Linq.Expressions.Expression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序类型</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Max(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Min(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Avg(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Count(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.ISqlBuilder.Sum(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:SQLExtension.Repositories.IRepository">
            <summary>
            数据操作仓储接口
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.IRepository.CommandTimeout">
            <summary>
            超时时长，默认240s
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.IRepository.ConnectionString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.IRepository.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.IRepository.IsEnableFormat">
            <summary>
            是否启用对表名和列名格式化，注意：只针对Lambda表达式解析生成的sql
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.IRepository.SqlIntercept">
            <summary>
            sql拦截委托
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.BeginTrans">
            <summary>
            开启事务
            </summary>
            <returns>IRepository</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteBySql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteBySql(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteBySql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProc(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProc(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProc``1(System.String,System.Object)">
            <summary>
            执行sql存储过程查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procName"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteBySqlAsync(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteBySqlAsync(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteBySqlAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProcAsync(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProcAsync(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProcAsync``1(System.String,System.Object)">
            <summary>
            执行sql存储过程查询
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.ExecuteByProcAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Insert``1(``0)">
            <summary>
            插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.InsertAsync``1(``0)">
            <summary>
            插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.InsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Delete``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Delete``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Delete``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="KeyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Delete``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.DeleteAsync``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.DeleteAsync``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.DeleteAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.DeleteAsync``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="KeyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.DeleteAsync``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Update``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.UpdateAsync``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.UpdateAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindObject(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindObject(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindObject(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindObjectAsync(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindObjectAsync(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindObjectAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntity``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="KeyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntity``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntity``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntity``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="KeyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntityAsync``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="KeyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntityAsync``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntityAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntityAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="KeyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryable``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryableAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param> 
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindList``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListByWith``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListByWith``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListByWithAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindListByWithAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTable(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTable(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTable(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTable(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTable(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableByWith(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableByWith(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableAsync(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableByWithAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindTableByWithAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindMultiple(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindMultiple(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindMultiple(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindMultipleAsync(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindMultipleAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.IRepository.FindMultipleAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="T:SQLExtension.Repositories.MySqlRepository">
            <summary>
            MySql仓储实现类
            </summary>
        </member>
        <member name="F:SQLExtension.Repositories.MySqlRepository.tranConnection">
            <summary>
            事务数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.MySqlRepository.CommandTimeout">
            <summary>
            超时时长，默认240s
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.MySqlRepository.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.MySqlRepository.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.MySqlRepository.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.MySqlRepository.IsEnableFormat">
            <summary>
            是否启用对表名和列名格式化，注意：只针对Lambda表达式解析生成的sql
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.MySqlRepository.SqlIntercept">
            <summary>
            sql拦截委托
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connString">链接字符串，或者链接字符串名称</param>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.BeginTrans">
            <summary>
            开启事务
            </summary>
            <returns>IRepository</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteBySql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteBySql(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteBySql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProc(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProc(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProc``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteBySqlAsync(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteBySqlAsync(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteBySqlAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProcAsync(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProcAsync(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProcAsync``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.ExecuteByProcAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Insert``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.InsertAsync``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.InsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Delete``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Delete``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Delete``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Delete``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.DeleteAsync``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.DeleteAsync``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.DeleteAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.DeleteAsync``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.DeleteAsync``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Update``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.UpdateAsync``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.UpdateAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindObject(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindObject(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindObject(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindObjectAsync(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindObjectAsync(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindObjectAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntity``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntity``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntity``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntity``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntityAsync``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntityAsync``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntityAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntityAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryable``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryableAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindList``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListByWith``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListByWith``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListByWithAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindListByWithAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTable(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTable(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTable(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTable(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTable(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableByWith(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableByWith(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableAsync(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableByWithAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindTableByWithAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindMultiple(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindMultiple(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindMultiple(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindMultipleAsync(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindMultipleAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.FindMultipleAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.MySqlRepository.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:SQLExtension.Repositories.NpgsqlRepository">
            <summary>
            PostgreSQL仓储实现类
            </summary>
        </member>
        <member name="F:SQLExtension.Repositories.NpgsqlRepository.tranConnection">
            <summary>
            事务数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.NpgsqlRepository.CommandTimeout">
            <summary>
            超时时长，默认240s
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.NpgsqlRepository.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.NpgsqlRepository.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.NpgsqlRepository.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.NpgsqlRepository.IsEnableFormat">
            <summary>
            是否启用对表名和列名格式化，注意：只针对Lambda表达式解析生成的sql
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.NpgsqlRepository.SqlIntercept">
            <summary>
            sql拦截委托
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connString">链接字符串，或者链接字符串名称</param>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.BeginTrans">
            <summary>
            开启事务
            </summary>
            <returns>IRepository</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteBySql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteBySql(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteBySql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProc(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProc(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProc``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteBySqlAsync(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteBySqlAsync(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteBySqlAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProcAsync(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProcAsync(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProcAsync``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.ExecuteByProcAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Insert``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.InsertAsync``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.InsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Delete``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Delete``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Delete``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Delete``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.DeleteAsync``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.DeleteAsync``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.DeleteAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.DeleteAsync``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.DeleteAsync``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Update``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.UpdateAsync``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.UpdateAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindObject(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindObject(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindObject(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindObjectAsync(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindObjectAsync(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindObjectAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntity``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntity``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntity``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntity``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntityAsync``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntityAsync``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntityAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntityAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryable``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryableAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindList``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListByWith``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListByWith``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListByWithAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindListByWithAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTable(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTable(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTable(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTable(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTable(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableByWith(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableByWith(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableAsync(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableByWithAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindTableByWithAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindMultiple(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindMultiple(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindMultiple(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindMultipleAsync(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindMultipleAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.FindMultipleAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.NpgsqlRepository.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:SQLExtension.Repositories.OracleRepository">
            <summary>
            Oracle仓储实现类
            </summary>
        </member>
        <member name="F:SQLExtension.Repositories.OracleRepository.tranConnection">
            <summary>
            事务数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.OracleRepository.CommandTimeout">
            <summary>
            超时时长，默认240s
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.OracleRepository.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.OracleRepository.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.OracleRepository.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.OracleRepository.IsEnableFormat">
            <summary>
            是否启用对表名和列名格式化，注意：只针对Lambda表达式解析生成的sql
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.OracleRepository.SqlIntercept">
            <summary>
            sql拦截委托
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connString">链接字符串，或者链接字符串名称</param>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.BeginTrans">
            <summary>
            开启事务
            </summary>
            <returns>IRepository</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteBySql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteBySql(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteBySql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProc(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProc(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProc``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteBySqlAsync(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteBySqlAsync(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteBySqlAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProcAsync(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProcAsync(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProcAsync``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.ExecuteByProcAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Insert``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.InsertAsync``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.InsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Delete``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Delete``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Delete``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Delete``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.DeleteAsync``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.DeleteAsync``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.DeleteAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.DeleteAsync``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.DeleteAsync``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Update``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.UpdateAsync``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.UpdateAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindObject(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindObject(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindObject(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindObjectAsync(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindObjectAsync(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindObjectAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntity``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntity``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntity``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntity``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntityAsync``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntityAsync``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntityAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntityAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryable``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryableAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindList``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListByWith``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListByWith``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListByWithAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindListByWithAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTable(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTable(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTable(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTable(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTable(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableByWith(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableByWith(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableAsync(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableByWithAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindTableByWithAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindMultiple(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindMultiple(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindMultiple(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindMultipleAsync(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindMultipleAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.FindMultipleAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.OracleRepository.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:SQLExtension.Repositories.SqliteRepository">
            <summary>
            Sqlite仓储实现类
            </summary>
        </member>
        <member name="F:SQLExtension.Repositories.SqliteRepository.tranConnection">
            <summary>
            事务数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqliteRepository.CommandTimeout">
            <summary>
            超时时长，默认240s
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqliteRepository.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqliteRepository.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqliteRepository.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqliteRepository.IsEnableFormat">
            <summary>
            是否启用对表名和列名格式化，注意：只针对Lambda表达式解析生成的sql
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqliteRepository.SqlIntercept">
            <summary>
            sql拦截委托
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connString">链接字符串，或者链接字符串名称</param>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.BeginTrans">
            <summary>
            开启事务
            </summary>
            <returns>IRepository</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteBySql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteBySql(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteBySql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProc(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProc(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProc``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteBySqlAsync(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteBySqlAsync(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteBySqlAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProcAsync(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProcAsync(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProcAsync``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.ExecuteByProcAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Insert``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.InsertAsync``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.InsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Delete``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Delete``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Delete``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Delete``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.DeleteAsync``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.DeleteAsync``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.DeleteAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.DeleteAsync``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.DeleteAsync``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Update``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.UpdateAsync``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.UpdateAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindObject(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindObject(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindObject(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindObjectAsync(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindObjectAsync(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindObjectAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntity``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntity``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntity``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntity``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntityAsync``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntityAsync``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntityAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntityAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryable``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryableAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindList``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListByWith``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListByWith``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListByWithAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindListByWithAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTable(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTable(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTable(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTable(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTable(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableByWith(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableByWith(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableAsync(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableByWithAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindTableByWithAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindMultiple(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindMultiple(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindMultiple(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindMultipleAsync(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindMultipleAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.FindMultipleAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqliteRepository.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:SQLExtension.Repositories.SqlRepository">
            <summary>
            Sqlserver仓储实现类
            </summary>
        </member>
        <member name="F:SQLExtension.Repositories.SqlRepository.tranConnection">
            <summary>
            事务数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqlRepository.CommandTimeout">
            <summary>
            超时时长，默认240s
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqlRepository.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqlRepository.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqlRepository.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqlRepository.IsEnableFormat">
            <summary>
            是否启用对表名和列名格式化，注意：只针对Lambda表达式解析生成的sql
            </summary>
        </member>
        <member name="P:SQLExtension.Repositories.SqlRepository.SqlIntercept">
            <summary>
            sql拦截委托
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connString">链接字符串，或者链接字符串名称</param>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.BeginTrans">
            <summary>
            开启事务
            </summary>
            <returns>IRepository</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteBySql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteBySql(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteBySql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProc(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProc(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProc``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteBySqlAsync(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteBySqlAsync(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteBySqlAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProcAsync(System.String)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProcAsync(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProcAsync``1(System.String,System.Object)">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.ExecuteByProcAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行sql存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Insert``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.InsertAsync``1(``0)">
            <summary>
             插入单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要插入的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.InsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要插入的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Delete``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Delete``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Delete``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Delete``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.DeleteAsync``1">
            <summary>
            删除全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.DeleteAsync``1(``0)">
            <summary>
            删除单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要删除的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.DeleteAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要删除的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">删除条件</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.DeleteAsync``1(System.Object[])">
            <summary>
            根据主键删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键或者多个主键批量删除</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.DeleteAsync``1(System.String,System.Object)">
            <summary>
            根据属性删除实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>       
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Update``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.UpdateAsync``1(``0)">
            <summary>
            更新单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.UpdateAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新多个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="entities">要更新的实体集合</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            根据条件更新实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">更新条件</param>
            <param name="entity">要更新的实体</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindObject(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindObject(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindObject(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindObjectAsync(System.String)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindObjectAsync(System.String,System.Object)">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindObjectAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询单个对象
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果对象</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntity``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntity``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntity``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntity``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntityAsync``1(System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntityAsync``1(System.String)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntityAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntityAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object[])">
            <summary>
            根据主键查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="keyValues">主键，多个值表示联合主键</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询单个实体
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回实体</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryable``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryableAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.IQueryableAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindList``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListByWith``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListByWith``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查询指定列
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            根据条件查询指定列并排序
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="orderTypes">排序类型，默认正序排序</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回集合</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>        
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="selector">选择指定列，null选择全部</param>
            <param name="predicate">查询条件</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListByWithAsync``1(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindListByWithAsync``1(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回集合和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTable(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTable(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTable(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTable(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTable(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableByWith(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableByWith(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableAsync(System.String)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据sql语句查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableByWithAsync(System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindTableByWithAsync(System.String,System.Data.Common.DbParameter[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            with语法分页查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <param name="orderField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>        
            <returns>返回DataTable和总记录数</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindMultiple(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindMultiple(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindMultiple(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindMultipleAsync(System.String)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindMultipleAsync(System.String,System.Object)">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.FindMultipleAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据sql语句查询返回多个结果集
            </summary>
            <param name="sql">sql语句</param>
            <param name="dbParameter">对应参数</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:SQLExtension.Repositories.SqlRepository.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:SQLExtension.SqlBuilder">
            <summary>
            SqlBuilder
            </summary>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Insert``1(System.Linq.Expressions.Expression{System.Func{System.Object}},SQLExtension.DatabaseType,System.Boolean,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Insert
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Delete``1(SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Delete
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Update``1(System.Linq.Expressions.Expression{System.Func{System.Object}},SQLExtension.DatabaseType,System.Boolean,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Update
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Select``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Max
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Min
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Avg
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Count
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            Sum
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="databaseType">数据库类型</param>
            <param name="sqlIntercept">sql拦截委托</param>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.GetTableName``1(System.Boolean)">
            <summary>
            获取实体对应的数据库表名
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns>string</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilder.GetPrimaryKey``1(System.Boolean)">
            <summary>
            获取实体对应的数据库表的主键名(多主键)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isEnableFormat">是否启用对表名和列名格式化，默认启用</param>
            <returns></returns>
        </member>
        <member name="T:SQLExtension.SqlBuilderCore`1">
            <summary>
            SqlBuilderCore
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="F:SQLExtension.SqlBuilderCore`1._sqlPack">
            <summary>
            _sqlPack
            </summary>
        </member>
        <member name="P:SQLExtension.SqlBuilderCore`1.SqlIntercept">
            <summary>
            SQL拦截委托
            </summary>
        </member>
        <member name="P:SQLExtension.SqlBuilderCore`1.Sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:SQLExtension.SqlBuilderCore`1.Parameters">
            <summary>
            SQL格式化参数
            </summary>
        </member>
        <member name="P:SQLExtension.SqlBuilderCore`1.DynamicParameters">
            <summary>
            Dapper格式化参数
            </summary>
        </member>
        <member name="P:SQLExtension.SqlBuilderCore`1.DbParameters">
            <summary>
            SQL格式化参数
            </summary>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.#ctor(SQLExtension.DatabaseType,System.Boolean)">
            <summary>
            SqlBuilderCore
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="isEnableFormat">是否启用表名和列名格式化</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.#ctor(SQLExtension.DatabaseType,System.Func{System.String,System.Object,System.String},System.Boolean)">
            <summary>
            SqlBuilderCore
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="sqlIntercept">SQL拦截委托</param>
            <param name="isEnableFormat">是否启用表名和列名格式化</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select(System.Type[])">
            <summary>
            SelectParser
            </summary>
            <param name="array">可变数量参数</param>
            <returns>string</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select(System.Linq.Expressions.Expression)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Select``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Join(System.String)">
            <summary>
            Join
            </summary>
            <param name="sql">自定义Join语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Join(System.Text.StringBuilder)">
            <summary>
            Join
            </summary>
            <param name="sql">自定义Join语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.String)">
            <summary>
            Join
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <param name="join">连接类型</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.String)">
            <summary>
            Join
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <param name="join">连接类型</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Join
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Join
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.InnerJoin(System.String)">
            <summary>
            InnerJoin
            </summary>
            <param name="sql">自定义InnerJoin语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.InnerJoin(System.Text.StringBuilder)">
            <summary>
            InnerJoin
            </summary>
            <param name="sql">自定义InnerJoin语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.InnerJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            InnerJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.InnerJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            InnerJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.LeftJoin(System.String)">
            <summary>
            LeftJoin
            </summary>
            <param name="sql">自定义LeftJoin语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.LeftJoin(System.Text.StringBuilder)">
            <summary>
            LeftJoin
            </summary>
            <param name="sql">自定义LeftJoin语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            LeftJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            LeftJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.RightJoin(System.String)">
            <summary>
            RightJoin
            </summary>
            <param name="sql">自定义RightJoin语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.RightJoin(System.Text.StringBuilder)">
            <summary>
            RightJoin
            </summary>
            <param name="sql">自定义RightJoin语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            RightJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            RightJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.FullJoin(System.String)">
            <summary>
            FullJoin
            </summary>
            <param name="sql">自定义FullJoin语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.FullJoin(System.Text.StringBuilder)">
            <summary>
            FullJoin
            </summary>
            <param name="sql">自定义FullJoin语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.FullJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            FullJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.FullJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            FullJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.String)">
            <summary>
            Where
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.String,System.Boolean@)">
            <summary>
            Where
            </summary>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.Text.StringBuilder)">
            <summary>
            Where
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.Text.StringBuilder,System.Boolean@)">
            <summary>
            Where
            </summary>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.Linq.Expressions.Expression)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.Linq.Expressions.Expression,System.Boolean@)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Where``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Boolean@)">
            <summary>
            Where
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.String)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.String,System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.Text.StringBuilder)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.Text.StringBuilder,System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.Linq.Expressions.Expression)">
            <summary>
            AndWhere
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.Linq.Expressions.Expression,System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <param name="expression"></param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.AndWhere``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.String)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.String,System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.Text.StringBuilder)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.Text.StringBuilder,System.Boolean@)">
            <summary>
            AndWhere
            </summary>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.Linq.Expressions.Expression)">
            <summary>
            OrWhere
            </summary>
            <param name="expression">表达式树</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.Linq.Expressions.Expression,System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrWhere``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Boolean@)">
            <summary>
            OrWhere
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.String)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.String,System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.String,System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.String,System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Text.StringBuilder)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Text.StringBuilder,System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Text.StringBuilder,System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Text.StringBuilder,System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="sql">自定义sql语句</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression,System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression,System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression,System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``2(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``2(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``2(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``2(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``3(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``3(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``3(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``3(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``4(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``4(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``4(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``4(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``5(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``5(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``5(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``5(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``6(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``6(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``6(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``6(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``7(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``7(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``7(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``7(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``8(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``8(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``8(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``8(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``9(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``9(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``9(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Boolean@)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WhereIf``9(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}},System.Boolean@,System.Action)">
            <summary>
            WhereIf
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="condition">条件</param>
            <param name="expression">表达式树</param>
            <param name="hasWhere">指定是否已包含where关键字</param>
            <param name="callback">当条件满足时，执行完拼接后回调委托</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WithKey(`0)">
            <summary>
            添加主键条件，主要针对更新实体和删除实体操作
            </summary>
            <param name="entity">实体对象</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.WithKey(System.Object[])">
            <summary>
            添加主键条件，主要针对更新实体和删除实体操作
            </summary>
            <param name="keyValue">主键值</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy(System.String)">
            <summary>
            GroupBy
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy(System.Text.StringBuilder)">
            <summary>
            GroupBy
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy(System.Linq.Expressions.Expression)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GroupBy``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy(System.String)">
            <summary>
            OrderBy
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy(System.Text.StringBuilder)">
            <summary>
            OrderBy
            </summary>
            <param name="sql">自定义sql语句</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy(System.Linq.Expressions.Expression,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.OrderBy``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}},SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Page(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Page
            </summary>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <param name="orderField">排序字段</param>
            <param name="sql">自定义sql语句</param>
            <param name="parameters">自定义sql格式化参数</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.PageByWith(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            PageByWith
            </summary>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <param name="orderField">排序字段</param>
            <param name="sql">自定义sql语句</param>
            <param name="parameters">自定义sql格式化参数</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Delete">
            <summary>
            Delete
            </summary>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Update(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Insert(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Avg(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Top(System.Int64)">
            <summary>
            Top
            </summary>
            <param name="topNumber">top数量</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.Distinct">
            <summary>
            Distinct
            </summary>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GetTableName">
            <summary>
            获取实体对应的表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderCore`1.GetPrimaryKey">
            <summary>
            获取实体对应表的主键名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:SQLExtension.SqlBuilderProvider">
            <summary>
            SqlBuilderProvider
            </summary>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.GetExpressionResolve(System.Linq.Expressions.Expression)">
            <summary>
            GetExpressionResolve
            </summary>
            <param name="expression">表达式树</param>
            <returns>ISqlBuilder</returns>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Update(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Insert(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Select(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Join(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Where(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.In(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.GroupBy(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.OrderBy(System.Linq.Expressions.Expression,SQLExtension.SqlPack,SQLExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Max(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Min(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Avg(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Count(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:SQLExtension.SqlBuilderProvider.Sum(System.Linq.Expressions.Expression,SQLExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="T:SQLExtension.SqlPack">
            <summary>
            SqlPack
            </summary>
        </member>
        <member name="F:SQLExtension.SqlPack.tableAlias">
            <summary>
            tableAlias
            </summary>
        </member>
        <member name="F:SQLExtension.SqlPack.dicTableName">
            <summary>
            dicTableName
            </summary>
        </member>
        <member name="F:SQLExtension.SqlPack.tableAliasQueue">
            <summary>
            tableAliasQueue
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.IsEnableNullValue">
            <summary>
            更新和新增时，是否对null值属性进行sql拼接操作
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.IsEnableFormat">
            <summary>
            是否启用表名和列名格式化
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.DefaultType">
            <summary>
            默认T类型
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.IsSingleTable">
            <summary>
            IsSingleTable
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.SelectFields">
            <summary>
            SelectFields
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.SelectFieldsStr">
            <summary>
            SelectFieldsStr
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.Sql">
            <summary>
            Sql
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.DatabaseType">
            <summary>
            DatabaseType
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.DbParameters">
            <summary>
            DbParameters
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.DbParamPrefix">
            <summary>
            DbParamPrefix
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.FormatTempl">
            <summary>
            FormatTempl
            </summary>
        </member>
        <member name="M:SQLExtension.SqlPack.#ctor">
            <summary>
            SqlPack
            </summary>
        </member>
        <member name="P:SQLExtension.SqlPack.Item(System.Int32)">
            <summary>
            this[index]
            </summary>
            <param name="index">索引</param>
            <returns>char</returns>
        </member>
        <member name="M:SQLExtension.SqlPack.op_Addition(SQLExtension.SqlPack,System.String)">
            <summary>
            operator +
            </summary>
            <param name="sqlPack">sql打包对象</param>
            <param name="sql">sql语句</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:SQLExtension.SqlPack.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:SQLExtension.SqlPack.AddDbParameter(System.Object,System.String)">
            <summary>
            AddDbParameter
            </summary>
            <param name="parameterValue">参数值</param>
            <param name="parameterKey">参数名称</param>
        </member>
        <member name="M:SQLExtension.SqlPack.SetTableAlias(System.String)">
            <summary>
            SetTableAlias
            </summary>
            <param name="tableName">表名</param>
            <returns>bool</returns>
        </member>
        <member name="M:SQLExtension.SqlPack.GetTableAlias(System.String)">
            <summary>
            GetTableAlias
            </summary>
            <param name="tableName">表名</param>
            <returns>string</returns>
        </member>
        <member name="M:SQLExtension.SqlPack.GetFormatName(System.String)">
            <summary>
            GetFormatName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlPack.GetTableName(System.Type)">
            <summary>
            GetTableName
            </summary>
            <param name="type">类型</param>
            <returns>string</returns>
        </member>
        <member name="M:SQLExtension.SqlPack.GetColumnName(System.String)">
            <summary>
            GetFormatColumnName
            </summary>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:SQLExtension.SqlPack.GetColumnInfo(System.Type,System.Reflection.MemberInfo)">
            <summary>
            GetColumnInfo
            </summary>
            <param name="type">类型</param>
            <param name="member">成员</param>
            <returns>Tuple</returns>
        </member>
        <member name="M:SQLExtension.SqlPack.GetPrimaryKey(System.Type)">
            <summary>
            GetPrimaryKey
            </summary>
            <param name="type">类型</param>
            <returns>Tuple</returns>
        </member>
        <member name="M:SQLExtension.SqlPack.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
    </members>
</doc>
